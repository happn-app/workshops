//! # models.rs â€“ ReprÃ©sentation des entitÃ©s de la base de donnÃ©es
//!
//! Ce module dÃ©finit :
//! - `User` : un utilisateur complet en base
//! - `NewUser` : un utilisateur Ã  insÃ©rer (sans id)
//!
//! Ces structures sont utilisÃ©es pour :
//! - sÃ©rialiser/dÃ©sÃ©rialiser en JSON (Actix)
//! - interagir avec PostgreSQL (Diesel)

use serde::{Serialize, Deserialize};   // Pour JSON <-> struct Rust
use diesel::prelude::*;               // Diesel ORM
use crate::schema::users;             // SchÃ©ma gÃ©nÃ©rÃ© (ou dÃ©fini) pour la table `users`
use uuid::Uuid;                       // Identifiant unique

/// âœ… ReprÃ©sente une ligne dans la table `users`
///
/// UtilisÃ© pour :
/// - Lire des donnÃ©es de la base (`Queryable`)
/// - Retourner des donnÃ©es au format JSON (`Serialize`)
#[derive(Debug, Serialize, Deserialize, Queryable, Selectable, Identifiable)]
#[diesel(table_name = users)]
#[diesel(check_for_backend(diesel::pg::Pg))] // Indique qu'on utilise PostgreSQL
pub struct User {
    pub id: Uuid,       // ğŸ†” UUID (clÃ© primaire)
    pub name: String,   // ğŸ‘¤ Nom de l'utilisateur
}

/// ğŸ†• Structure utilisÃ©e pour insÃ©rer un nouvel utilisateur
///
/// UtilisÃ© pour :
/// - CrÃ©er un utilisateur via POST/PUT
/// - SÃ©rialiser du JSON vers Rust
/// - InsÃ©rer en base via Diesel (`Insertable`)
#[derive(Debug, Serialize, Deserialize, Insertable)]
#[diesel(table_name = users)]
pub struct NewUser {
    pub name: String,   // ğŸ‘¤ Nom uniquement, sans ID
}
